pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        SONARQUBE_URL = 'http://20.229.186.85:9000/'
        SONARQUBE_TOKEN = 'squ_4e0e54420d63ce90d18e854133c2aa7b88dbc120'
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], userRemoteConfigs: [[url: 'https://github.com/YakirBar/Zomato-Clone.git']]])
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { 
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=test-oran \    # ודא שמפתח הפרויקט נכון
                        -Dsonar.sources=src/Sonascript-Amir \    # ודא שהנתיב למקורות נכון
                        -Dsonar.host.url=${SONARQUBE_URL} \    # כתובת ה-URL של SonarQube
                        -Dsonar.login=${SONARQUBE_TOKEN}    # ה-token של SonarQube
                    """
                }
            }
        }
    }

    post {
        always {
            // Optionally, wait for SonarQube analysis and quality gate status
            script {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }
    }
}
