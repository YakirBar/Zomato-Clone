pipeline {
    agent any

    tools {
        // Name should match the SonarQube Scanner installation in Jenkins
        sonarQube 'SonarQubeScanner'
    }

    environment {
        // Provide the URL to your SonarQube server
        SONARQUBE_URL = 'http://20.229.186.85:9000'
        // Use a token generated from your SonarQube server for authentication
        SONARQUBE_TOKEN = credentials('squ_4e0e54420d63ce90d18e854133c2aa7b88dbc120')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from version control
                git url: 'https://github.com/YakirBar/Zomato-Clone.git', branch: 'master'
            }
        }

        stage('Build') {
            steps {
                // Commands to build your project (e.g., for a Maven project)
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    // Run SonarQube Scanner with necessary properties
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=test-oran \
                        -Dsonar.projectName="test-oran" \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONARQUBE_TOKEN}
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube analysis to complete and obtain the result
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
            }
        }
    }

    post {
        always {
            // Perform actions after the pipeline run
            cleanWs()
        }
    }
}
